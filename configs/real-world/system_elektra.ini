version = Below are version information of the Elektra Library you are currently using
[modules]
dump = dump plugin waits for your orders
dump/exports = 
dump/infos = Information about the dump plugin is in keys below
dump/infos/author = Markus Raab <elektra@libelektra.org>
dump/infos/description = Dumps into a format tailored for complete KeySet semantics
	"## Introduction"
	This plugin is a storage plugin that supports full Elektra
	semantics. Combined with a resolver plugin it already assembles a fully
	featured backend. No other plugins are needed.
	"## Format"
	The file format edf (Elektra dump format) consists of a simple command language with
	arguments. When an argument is binary or string data the length needs to be
	passed first. Because the size is known in advance, any binary dump is
	accepted. Terminating characters present no problem. The commands are
	assembled similar to the ones present in Elektra’s API.
	The file starts with the magic word `kdbOpen` followed by a version
	number. Processing can be stopped immediately when it is not in
	Elektra’s dump format at all. A wrong version number most likely
	indicates that the version of the plugin is too old to recognise all
	commands in the file. The basic idea of the dump plugin is to write
	out the way that the KeySet needs to be constructed. The dump plugin
	interprets such a file. The file also looks similar to C code that
	would create the KeySet. Keys can contain any binary values and arbitrary
	metadata and are still stored and parsed correctly. The dump plugin can
	even reconstruct pointers to metadata to save memory. When a pointer
	to the same region of memory is found, a special command `keyCopyMeta`
	is written out that is able to reconstruct the data structure the way
	it was before. The commands were designed to make parsing of the file
	an easy task.
	"### Format Examples"
	The serialised configuration can look like (0 bytes at end of strings are
	omitted):
	"    kdbOpen 1"
	"    ksNew 207"
	"    keyNew 27 1"
	"    system/elektra/mountpoints"
	"    keyMeta 8 27"
	"    commentBelow are the mountpoints."
	"    keyEnd"
	"    keyNew 32 19"
	"    system/elektra/mountpoints/dbusserialised Backend"
	"    keyEnd keyNew 39 1"
	"    system/elektra/mountpoints/dbus/config"
	"    keyMeta 8 72"
	"    commentThis is a configuration for a backend, see subkeys for more information"
	"    keyEnd"
	"    keyNew 53 1"
	"    system/elektra/mountpoints/fstab/config/struct/FStab"
	"    keyCopyMeta 59 11"
	"    system/elektra/mountpoints/file"
	"    systems/config/struct/FStabcheck/type"
	"    keyEnd"
	"    ksEnd"
	"## Limitations"
	(status -1000)
	- It is quite slow
	- Files cannot easily edited by hand
	"## Examples"
	Export a KeySet using `dump`:
	"    kdb export system/example dump > example.ecf"
	Import a KeySet using `dump`:
	"    cat example.ecf | kdb import system/example dump"
	Using grep/diff or other Unix tools on the dump file. Make sure that you
	treat it as text file, e.g.:
	"    grep --text mountpoints example.ecf"
dump/infos/licence = BSD
dump/infos/metadata = 
dump/infos/needs = 
dump/infos/placements = getstorage setstorage
dump/infos/provides = storage/dump storage dump
dump/infos/recommends = 
dump/infos/status = productive maintained conformant unittest tested nodep -1000 default
dump/infos/version = 1
list = list plugin waits for your orders
list/exports = 
list/infos = Information about the list plugin is in keys below
list/infos/author = Thomas Waser <thomas.waser@libelektra.org>
list/infos/description = delegates work to a list of plugins
	"## Introduction"
	The List plugin can be used everywhere a list of plugins is required. It takes a list of plugins + configurations
	for every placement it's placed in and loads them.
	"## Configuration"
	`placements/set`
	"Specifies the set-placements for the list plugin, e.g. "presetstorage precommit""
	`placements/get`
	Specifies the get-placements for the list plugin.
	`placements/error`
	Specifies the error-placements for the list plugin.
	`plugins/#`
	The name of the plugin to load.
	`plugins/#/handle`
	Internal handle of already loaded plugin. Useful when loading plugins at
	run-time with `elektraPluginOpen()`. Do not set permanently (e.g. with
	`kdb set`).
	`plugins/#/placements/set`
	"A list of set-placements for the plugin. Same for "get" and "error""
	`plugins/#/config/`
	Plugin specific config.
	"## Example"
	"    placements/get = "postgetstorage""
	"    plugins/#0 = "rename""
	"    plugins/#0/placements   plugin placements"
	"    plugins/#0/placements/get = "postgetstorage""
	"    plugins/#0/config   pluginconfig goes here"
	"    plugins/#0/config/cut = "will/be/stripped""
	"    plugins/#1 = "keytometa""
	"    plugins/#1/placements"
	"    plugins/#1/placements/get = "postgetstorage""
	"    plugins/#2 = "enum""
	"    plugins/#2/placements"
	"    plugins/#2/placements/get = "postgetstorage""
	would have the callstack:
	1. `list->kdbGet`
	"  1. `rename->kdbGet`"
	"  2. `keytometa->kdbGet`"
	"  3. `enum->kdbGet`"
list/infos/licence = BSD
list/infos/needs = 
list/infos/placements = presetstorage pregetstorage postgetstorage precommit postcommit prerollback postrollback
list/infos/provides = 
list/infos/status = maintained unittest nodep libc configurable global
list/infos/version = 1
resolver_fm_hpu_b = resolver_fm_hpu_b plugin waits for your orders
resolver_fm_hpu_b/constants = 
resolver_fm_hpu_b/constants/ELEKTRA_VARIANT_BASE = fm
resolver_fm_hpu_b/constants/ELEKTRA_VARIANT_SYSTEM = b
resolver_fm_hpu_b/constants/ELEKTRA_VARIANT_USER = hpu
resolver_fm_hpu_b/constants/KDB_DB_DIR = .dir
resolver_fm_hpu_b/constants/KDB_DB_HOME = /home
resolver_fm_hpu_b/constants/KDB_DB_SPEC = /usr/share/elektra/specification
resolver_fm_hpu_b/constants/KDB_DB_SYSTEM = /etc/kdb
resolver_fm_hpu_b/constants/KDB_DB_USER = .config
resolver_fm_hpu_b/exports = 
resolver_fm_hpu_b/infos = All information you want to know is in keys below
resolver_fm_hpu_b/infos/author = Markus Raab <elektra@markus-raab.org>
resolver_fm_hpu_b/infos/description = system independent resolver
	"## Introduction"
	The resolver_fm_hpu_b handles operating system dependent tasks.
	One task is the resolving of the filenames for user and system (hence its name).
	Use following command to see to which file is resolved to:
	"    kdb file <Elektra path you are interested in>"
	See the constants of this plugin for further information, they are:
	"    system/elektra/modules/resolver_fm_hpu_b/constants"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/ELEKTRA_VARIANT_SYSTEM"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/ELEKTRA_VARIANT_USER"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/KDB_DB_HOME"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/KDB_DB_SYSTEM"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/KDB_DB_USER"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/KDB_DB_SPEC"
	"    system/elektra/modules/resolver_fm_hpu_b/constants/KDB_DB_DIR"
	The build-in resolving considers following cases:
	- for spec with absolute path: path
	- for spec with relative path: KDB_DB_SPEC + path
	- for dir with absolute path: `pwd` + path (or above when path is found)
	- for dir with relative path: `pwd` + KDB_DB_DIR + path (or above when path is found)
	- for user with absolute path: ~ + path
	- for user with relative path: ~ + KDB_DB_USER + path
	- for system with absolute path: path
	- for system with relative path: KDB_DB_SYSTEM + path
	(~ and `pwd` are resolved from system)
	"## Example"
	For an absolute path /example.ini, you might get following values:
	- for spec: /example.ini
	- for dir: `pwd`/example.ini
	- for user: ~/example.ini
	- for system: /example.ini
	For an relative path example.ini, you might get following values:
	- for spec: /usr/share/elektra/specification/example.ini
	- for dir: `pwd`/.dir/example.ini
	- for user: ~/.config/example.ini
	- for system: /etc/kdb/example.ini
	See [the mount tutorial](/doc/tutorials/mount.md) for more examples.
	"## Variants"
	Many variants exist that additionally influence the resolving
	process, typically by using environment variables.
	Environment variables are very simple for one-time usage but their
	maintenance in start-up scripts is problematic. Additionally, they
	are controlled by the user, so they cannot be trusted. So it is not
	recommended to use environment variables.
	Note that the file permissions apply, so it might be possible for
	non-root to modify keys in `system`.
	See [COMPILE.md](/doc/COMPILE.md) for a documentation of possible
	variants.
	"### XDG Compatibility"
	The resolver is fully [XDG compatible](http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html)
	if configured with the variant:
	- xp, xh or xu for user (either using passwd, HOME or USER as fallback
	"  or any combination of these fallbacks)"
	- x for system, no fallback necessary
	Additionally `KDB_DB_USER` needs to be left unchanged as `.config`.
	`XDG_CONFIG_DIRS` will be used to resolve system paths the following
	way:
	- if unset or empty `/etc/xdg` will be used instead
	- all elements are searched in order of importance
	" - if a file was found, the search process is stopped"
	" - if no file was found, the least important element will be used for"
	"   potential write attempts."
	"## Reading Configuration"
	1. If no update needed (unchanged modification time): quit successfully
	2. Otherwise call (storage) plugin(s) to read configuration
	3. remember the last stat time (last update)
	"## Writing Configuration"
	0. On unchanged configuration: quit successfully
	1. On empty configuration: remove the configuration file and quit successfully
	2. Otherwise, open the configuration file
	"     If not available recursively create directories and retry."
	3. Try to lock a global mutex, if not possible -> conflict
	4. Try to lock the configuration file, if not possible -> conflict
	5. Check the update time -> might lead to conflict
	6. Update the update time (in order to not self-conflict)
	We have an optimistic approach. Locking is only used to detect concurrent
	cooperative processes in the short moment between prepare and commit.
	A conflict will be raised in that situation.  When processes do not lock
	the file it might be overwritten. This is, however, very unlikely on
	file systems with nanosecond precision.
	"## Exported Functions and Data"
	The resolver provides 2 functions for other plugins to use.
	"### filename"
	resolves `path` in with namespace `namespace`, creates a temporary file to work on and returns a struct containing the resolved data.
	Signature:
	"    `ElektraResolved * filename (elektraNamespace namespace, const char * path, ElektraResolveTempfile tempFile, Key * warningsKey)`"
	"`ElektraResolved` and `ElektraResolveTempfile` are both defined in [shared.h](shared.h). "
	`ElektraResolved` is a struct with the following members:
	" - `relPath`: contains the path relative to the namespace."
	" - `dirname`: contains the parent directory of the resolved file."
	" - `fullPath`: contains the full path of the resolved file."
	" - `tmpFile`: contains the full path of the created temporary file."
	`ElektraResolveTempfile` dictates if and where a temporarey file should be created. Possible values:
	" - `ELEKTRA_RESOLVER_TEMPFILE_NONE`: don't create a temporary file."
	" - `ELEKTRA_RESOLVER_TEMPFILE_SAMEDIR`: create a temporary file in the same directory as the resolved file."
	" - `ELEKTRA_RESOLVER_TEMPFILE_TMPDIR`: create a temporary file in `/tmp`."
	"### freeHandle"
	frees the handle returned by `filename`.
	Signature:
	"    `void * freeHandle (ElektraResolved * handle)`"
	where `handle` is the handle returned by `filename`.
resolver_fm_hpu_b/infos/licence = BSD
resolver_fm_hpu_b/infos/needs = 
resolver_fm_hpu_b/infos/placements = rollback getresolver setresolver commit
resolver_fm_hpu_b/infos/provides = resolver
resolver_fm_hpu_b/infos/status = productive maintained specific unittest tested libc nodep configurable default
resolver_fm_hpu_b/infos/version = 1
[modules/dump/config/needs/fcrypt]
textmode = 0
[modules/dump/exports/get]
[modules/dump/exports/serialise]
[modules/dump/exports/set]
[modules/dump/exports/unserialise]
[modules/list/exports/addPlugin]
[modules/list/exports/close]
[modules/list/exports/editPlugin]
[modules/list/exports/error]
[modules/list/exports/get]
[modules/list/exports/open]
[modules/list/exports/set]
[modules/resolver_fm_hpu_b/exports/checkfile]
[modules/resolver_fm_hpu_b/exports/close]
[modules/resolver_fm_hpu_b/exports/error]
[modules/resolver_fm_hpu_b/exports/filename]
[modules/resolver_fm_hpu_b/exports/freeHandle]
[modules/resolver_fm_hpu_b/exports/get]
[modules/resolver_fm_hpu_b/exports/open]
[modules/resolver_fm_hpu_b/exports/set]
[version]
constants = 
constants/KDB_VERSION = 0.8.22
constants/KDB_VERSION_MAJOR = 0
constants/KDB_VERSION_MICRO = 22
constants/KDB_VERSION_MINOR = 8
constants/SO_VERSION = 4
infos = All information you want to know
infos/author = Markus Raab <elektra@markus-raab.org>
infos/description = Information of your Elektra Installation
infos/licence = BSD
infos/version = 1
